using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using DevExpress.XtraTreeList.Nodes;

namespace meters
{
    public partial class Shipments_status : DevExpress.XtraEditors.XtraForm
    {
        int check2 = 0;
        int check1 = 0;
        public Shipments_status()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
           
            // This line of code is generated by Data Source Configuration Wizard
            spr_ReturnReasonTableAdapter1.Fill(mmsDataSet2.spr_ReturnReason);
        }

        private void treeList1_FocusedNodeChanged(object sender, DevExpress.XtraTreeList.FocusedNodeChangedEventArgs e)
        {
            if (check1 == 1 || check2 == 1)
            {
                List<TreeListNode> nodes = treeList1.GetAllCheckedNodes();
                foreach (TreeListNode no in nodes)
                {
                    int ll3 = Convert.ToInt32(no.GetValue(treeList1.Columns[0]));
                    
                    try
                    {
                        if (ll3 == 1)
                        { this.returnMeterReasonTableAdapter.FillByALLReason(this.mmsDataSet2.ReturnMeterReason);
                        
                        }
                        if (ll3 == 2)
                        { this.returnMeterReasonTableAdapter.FillByALLReason(this.mmsDataSet2.ReturnMeterReason); }
                        if (ll3 == 3)
                        { this.returnMeterReasonTableAdapter.FillByALLReason(this.mmsDataSet2.ReturnMeterReason); }
                        if (ll3 == 4)
                        {
                            Globals.returnDeffID = 8;
                            this.returnMeterReasonTableAdapter.FillByRealationID(this.mmsDataSet2.ReturnMeterReason, 8); }
                        if (ll3 == 5)
                        {
                            Globals.returnDeffID = 10;
                            this.returnMeterReasonTableAdapter.FillByRealationID(this.mmsDataSet2.ReturnMeterReason, 10); }
                        if (ll3 == 6)
                        {
                            Globals.returnDeffID = 11;
                            this.returnMeterReasonTableAdapter.FillByRealationID(this.mmsDataSet2.ReturnMeterReason, 11); }
                    }
                    catch (Exception se)
                    {
                        MessageBox.Show("Error: " + se.ToString());
                    }
                    Close();
                }
            }
        }
        private void treeList1_BeforeCheckNode(object sender, DevExpress.XtraTreeList.CheckNodeEventArgs e)
        {
            e.State = (e.PrevState == CheckState.Checked ? CheckState.Unchecked : CheckState.Checked);
        }



        private void treeList1_AfterCheckNode(object sender, DevExpress.XtraTreeList.NodeEventArgs e)
        {

            SetCheckedChildNodes(e.Node, e.Node.CheckState);
            SetCheckedParentNodes(e.Node, e.Node.CheckState);


        }
        private void SetCheckedChildNodes(DevExpress.XtraTreeList.Nodes.TreeListNode node, CheckState check)
        {
            check2 = 1;
            for (int i = 0; i < node.Nodes.Count; i++)
            {
                node.Nodes[i].CheckState = check;
                SetCheckedChildNodes(node.Nodes[i], check);
            }
        }
        private void SetCheckedParentNodes(DevExpress.XtraTreeList.Nodes.TreeListNode node, CheckState check)
        {
            check1 = 1;
            if (node.ParentNode != null)
            {
                bool b = false;
                CheckState state;
                for (int i = 0; i < node.ParentNode.Nodes.Count; i++)
                {
                    state = (CheckState)node.ParentNode.Nodes[i].CheckState;
                    if (!check.Equals(state))
                    {
                        b = true;
                        //if()
                        break;
                    }
                }
                node.ParentNode.CheckState = b ? CheckState.Indeterminate : check;
                SetCheckedParentNodes(node.ParentNode, check);
            }
        }
        private void simpleButton2_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void Shipments_status_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'mmsDataSet2.ReturnMeterReason' table. You can move, or remove it, as needed.
            this.returnMeterReasonTableAdapter.Fill(this.mmsDataSet2.ReturnMeterReason);
            // TODO: This line of code loads data into the 'mmsDataSet2.ReturnDeffectMeters' table. You can move, or remove it, as needed.
            this.returnDeffectMetersTableAdapter.Fill(this.mmsDataSet2.ReturnDeffectMeters);

        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            
            if (check1 == 1 || check2 == 1)
            {
                List<TreeListNode> nodes = treeList1.GetAllCheckedNodes();
                foreach (TreeListNode no in nodes)
                {
                    int ll3 = Convert.ToInt32(no.GetValue(treeList1.Columns[0]));
                   
                    try
                    {
                        if (ll3 == 1)
                        {
                            this.returnDeffectMetersTableAdapter.FillByMSNO(mmsDataSet2.ReturnDeffectMeters, Globals.id_Shipments);
                            if (this.mmsDataSet2.ReturnDeffectMeters.Rows.Count != 0)
                            {
                                foreach (DataRow tr in mmsDataSet2.ReturnDeffectMeters.Rows)
                                {
                                    int oldID = Convert.ToInt32(tr["id"]);
                                    this.returnDeffectMetersTableAdapter.UpdateOldReturn(oldID);
                                    break;
                                }
                            }
                            queriesTableAdapter1.defectMeter_Modem_Sim_1(Globals.id_Shipments, Globals.id_sim, Globals.id_user, Globals.id_doc_meter_mol_docs,textEdit1.Text.Trim()
                                , Globals.Date_return, Globals.NameExportReturn, Globals.NameImportReturn, Globals.returnDefId);
                            
                        }
                        if (ll3 == 2)
                        {
                            this.returnDeffectMetersTableAdapter.FillByMSNO(mmsDataSet2.ReturnDeffectMeters, Globals.id_Shipments);
                            if (this.mmsDataSet2.ReturnDeffectMeters.Rows.Count != 0)
                            {
                                foreach (DataRow tr in mmsDataSet2.ReturnDeffectMeters.Rows)
                                {
                                    int oldID = Convert.ToInt32(tr["id"]);
                                    this.returnDeffectMetersTableAdapter.UpdateOldReturn(oldID);
                                    break;
                                }
                            }

                            queriesTableAdapter1.DefectMeter_Modem_2(Globals.id_Shipments, Globals.id_sim, Globals.id_user, Globals.id_doc_meter_mol_docs,textEdit1.Text.Trim()
                                , Globals.Date_return, Globals.NameExportReturn, Globals.NameImportReturn, Globals.returnDefId);

                        }
                        if (ll3 == 3)
                        {
                            this.returnDeffectMetersTableAdapter.FillByMSNO(mmsDataSet2.ReturnDeffectMeters, Globals.id_Shipments);
                            if (this.mmsDataSet2.ReturnDeffectMeters.Rows.Count != 0)
                            {
                                foreach (DataRow tr in mmsDataSet2.ReturnDeffectMeters.Rows)
                                {
                                    int oldID = Convert.ToInt32(tr["id"]);
                                    this.returnDeffectMetersTableAdapter.UpdateOldReturn(oldID);
                                    break;
                                }
                            }

                            queriesTableAdapter1.defectMeter_Sim_3(Globals.id_Shipments, Globals.id_sim, Globals.id_user, Globals.id_doc_meter_mol_docs,textEdit1.Text.Trim()
                                , Globals.Date_return, Globals.NameExportReturn, Globals.NameImportReturn, Globals.returnDefId);

                        }
                        if (ll3 == 4)
                        {
                            this.returnDeffectMetersTableAdapter.FillByMSNO(mmsDataSet2.ReturnDeffectMeters, Globals.id_Shipments);
                            if (this.mmsDataSet2.ReturnDeffectMeters.Rows.Count != 0)
                            {
                                foreach (DataRow tr in mmsDataSet2.ReturnDeffectMeters.Rows)
                                {
                                    int oldID = Convert.ToInt32(tr["id"]);
                                    this.returnDeffectMetersTableAdapter.UpdateOldReturn(oldID);
                                    break;
                                }
                            }

                            queriesTableAdapter1.defectMeter_4(Globals.id_Shipments, Globals.id_sim, Globals.id_user, Globals.id_doc_meter_mol_docs,textEdit1.Text.Trim()
                                , Globals.Date_return, Globals.NameExportReturn, Globals.NameImportReturn,Globals.returnDefId);

                        }
                        if (ll3 == 5)
                        {
                            this.returnDeffectMetersTableAdapter.FillByMSNO(mmsDataSet2.ReturnDeffectMeters, Globals.id_Shipments);
                            if (this.mmsDataSet2.ReturnDeffectMeters.Rows.Count != 0)
                            {
                                foreach (DataRow tr in mmsDataSet2.ReturnDeffectMeters.Rows)
                                {
                                    int oldID = Convert.ToInt32(tr["id"]);
                                    this.returnDeffectMetersTableAdapter.UpdateOldReturn(oldID);
                                    break;
                                }
                            }

                            queriesTableAdapter1.defectSim_5(Globals.id_Shipments, Globals.id_sim, Globals.id_user, Globals.id_doc_meter_mol_docs,textEdit1.Text.Trim()
                                , Globals.Date_return, Globals.NameExportReturn, Globals.NameImportReturn,Globals.returnDefId);

                        }
                        if (ll3 == 6)
                        {
                            this.returnDeffectMetersTableAdapter.FillByMSNO(mmsDataSet2.ReturnDeffectMeters, Globals.id_Shipments);
                            if (this.mmsDataSet2.ReturnDeffectMeters.Rows.Count != 0)
                            {
                                foreach (DataRow tr in mmsDataSet2.ReturnDeffectMeters.Rows)
                                {
                                    int oldID = Convert.ToInt32(tr["id"]);
                                    this.returnDeffectMetersTableAdapter.UpdateOldReturn(oldID);
                                    break;
                                }
                            }

                            queriesTableAdapter1.defectModem_6(Globals.id_Shipments, Globals.id_sim, Globals.id_user, Globals.id_doc_meter_mol_docs,textEdit1.Text.Trim()
                                , Globals.Date_return, Globals.NameExportReturn, Globals.NameImportReturn,Globals.returnDefId);

                        }
                        //if (ll3 == 7)
                        //{
                        //    this.returnDeffectMetersTableAdapter.FillByMSNO(mmsDataSet2.ReturnDeffectMeters, Globals.id_Shipments);
                        //    if (this.mmsDataSet2.ReturnDeffectMeters.Rows.Count != 0)
                        //    {
                        //        foreach (DataRow tr in mmsDataSet2.ReturnDeffectMeters.Rows)
                        //        {
                        //            int oldID = Convert.ToInt32(tr["id"]);
                        //            this.returnDeffectMetersTableAdapter.UpdateOldReturn(oldID);
                        //            break;
                        //        }
                        //    }

                        //    queriesTableAdapter1.defectMeterBurned_7(Globals.id_Shipments, Globals.id_sim, Globals.id_user, Globals.id_doc_meter_mol_docs, textEdit1.Text.Trim(),
                        //         Globals.Date_return, Globals.NameExportReturn, Globals.NameImportReturn);

                        //}
                    }
                    catch (Exception se)
                    {
                        MessageBox.Show("Error: " + se.ToString());
                    }
                    Globals.id_doc_meter_for_main = Globals.id_doc_meter_mol_docs;
                    Globals.en_delegate_return();
                    textEdit1.Text = "";
                   

                    Close();

                }
            }
        }

        private void Shipments_status_Shown(object sender, EventArgs e)
        {
            //this.returnMeterReasonTableAdapter.Fill(this.mmsDataSet2.ReturnMeterReason);
            //this.returnMeterReasonTableAdapter.

        }

        private void lookUpEdit2_Closed(object sender, DevExpress.XtraEditors.Controls.ClosedEventArgs e)
        {
            if (e.CloseMode == DevExpress.XtraEditors.PopupCloseMode.Normal)
            {   
                Globals.returnDefId = (int)(sender as DevExpress.XtraEditors.LookUpEdit).GetColumnValue("id");
                
            }
        }

        private void lookUpEdit2_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            if (check1 == 1 || check2 == 1)
            {
                List<TreeListNode> nodes = treeList1.GetAllCheckedNodes();
                foreach (TreeListNode no in nodes)
                {
                    Globals.returnDeffID = Convert.ToInt32(no.GetValue(treeList1.Columns[0]));
                }
            }

            if (Globals.returnDeffID == 11 || Globals.returnDeffID == 10 || Globals.returnDeffID == 8)

                this.returnMeterReasonTableAdapter.FillByRealationID(this.mmsDataSet2.ReturnMeterReason, Globals.returnDeffID);
            else
            {
                this.returnMeterReasonTableAdapter.FillByALLReason(this.mmsDataSet2.ReturnMeterReason);
            }
            Globals.returnDeffID = 0;
        }

        //private void simpleButton3_Click(object sender, EventArgs e)
        //{
        //    if (check1 == 1 || check2 == 1)
        //    {
        //        List<TreeListNode> nodes = treeList1.GetAllCheckedNodes();
        //        foreach (TreeListNode no in nodes)
        //        {
        //            int ll3 = Convert.ToInt32(no.GetValue(treeList1.Columns[0]));

        //            try
        //            {
        //                if (ll3 == 1)
        //                {
        //                    queriesTableAdapter1.defectMeter_Modem_Sim_1(Globals.id_Shipments, Globals.id_sim, Globals.id_user, DateTime.Today);

        //                }
        //                if (ll3 == 2)
        //                {
        //                    queriesTableAdapter1.DefectMeter_Modem_2(Globals.id_Shipments, Globals.id_sim, Globals.id_user, DateTime.Today);

        //                }
        //                if (ll3 == 3)
        //                {
        //                    queriesTableAdapter1.defectMeter_Sim_3(Globals.id_Shipments, Globals.id_sim, Globals.id_user, DateTime.Today);

        //                }
        //                if (ll3 == 4)
        //                {
        //                    queriesTableAdapter1.defectMeter_4(Globals.id_Shipments, Globals.id_sim, Globals.id_user, DateTime.Today);

        //                }
        //                if (ll3 == 5)
        //                {
        //                    queriesTableAdapter1.defectSim_5(Globals.id_Shipments, Globals.id_sim, Globals.id_user, DateTime.Today);

        //                }
        //                if (ll3 == 6)
        //                {
        //                    queriesTableAdapter1.defectModem_6(Globals.id_Shipments, Globals.id_sim, Globals.id_user, DateTime.Today);

        //                }
        //                queriesTableAdapter1.update_part_Quantity2(Globals.id_Part_Meter, Globals.id_history_meter_ship,Globals.Quantity);
        //                Globals.del_histiry_ship();
                       
        //            }
        //            catch (Exception se)
        //            {
        //                MessageBox.Show("Error: " + se.ToString());
        //            }
        //            Globals.id_doc_meter_for_main = Globals.id_doc_meter_mol_docs;
        //          //  Globals.en_delegate_return(); 
        //            Globals.del_histiry_ship();
        //            Close();

        //        }
        //    }
        //}
    }
}
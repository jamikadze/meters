using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using DevExpress.XtraTreeList.Nodes;
using System.Data.SqlClient;
using System.IO;
using meters.Properties;

namespace meters
{
    public partial class spr_Part_Box : DevExpress.XtraEditors.XtraForm
    {
        int indexx = 0;
        int check2 = 0;
        int check1 = 0;
        public spr_Part_Box()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard

            // This line of code is generated by Data Source Configuration Wizard
            partMeterTableAdapter1.FillByNe_Vydan(mmsDataSet1.PartMeter);}
        private void treeList1_BeforeCheckNode(object sender, DevExpress.XtraTreeList.CheckNodeEventArgs e)
        {
            e.State = (e.PrevState == CheckState.Checked ? CheckState.Unchecked : CheckState.Checked);
        }



        private void treeList1_AfterCheckNode(object sender, DevExpress.XtraTreeList.NodeEventArgs e)
        {

            SetCheckedChildNodes(e.Node, e.Node.CheckState);
            SetCheckedParentNodes(e.Node, e.Node.CheckState);


        }
        private void SetCheckedChildNodes(DevExpress.XtraTreeList.Nodes.TreeListNode node, CheckState check)
        {
            check2 = 1;
            for (int i = 0; i < node.Nodes.Count; i++)
            {
                node.Nodes[i].CheckState = check;
                SetCheckedChildNodes(node.Nodes[i], check);
            }
        }
        private void SetCheckedParentNodes(DevExpress.XtraTreeList.Nodes.TreeListNode node, CheckState check)
        {
            check1 = 1;
            if (node.ParentNode != null)
            {
                bool b = false;
                CheckState state;
                for (int i = 0; i < node.ParentNode.Nodes.Count; i++)
                {
                    state = (CheckState)node.ParentNode.Nodes[i].CheckState;
                    if (!check.Equals(state))
                    {
                        b = true;
                        break;
                    }
                }
                node.ParentNode.CheckState = b ? CheckState.Indeterminate : check;
                SetCheckedParentNodes(node.ParentNode, check);
            }
        }

        private void spr_Part_Box_Load(object sender, EventArgs e)
        {
           // partMeterTableAdapter1.FillByNe_Vydan(mmsDataSet1.PartMeter, Globals.id_partt);

        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            
            if (check1 == 1 || check2 == 1)
            {
                List<TreeListNode> nodes = treeList1.GetAllCheckedNodes();
                foreach (TreeListNode no in nodes)
                {

                    //int? idpart = Convert.ToInt32(no.GetValue(treeList1.Columns[0]));
                    //this.historyMeterSimTableAdapter1.PartCount(mmsDataSet1.HistoryMeterSim, idpart);
                    //int countp=this.historyMeterSimBindingSource.Count;

                    //int llkol= Convert.ToInt32(no.GetValue(treeList1.Columns[2]));
                    string ll3 = no.GetValue(treeList1.Columns[0]).ToString();
                    //string namepart = no.GetValue(treeList1.Columns[1]).ToString();
                    //if (countp == llkol)
                    //{

                        try
                        {
                           
                           this.queriesTableAdapter1.insert_MeterMOLdocs2(Globals.id_doc_meter_mol_docs, Convert.ToInt32(ll3));
                        }
                        catch (SqlException se)
                        {
                            MessageBox.Show("Этот счетчик уже выдан" + se.ToString());
                        }
                      
                    //}
                    //else
                    //{
                     //   MessageBox.Show("Кол-во не совподает\nв данной партии № " + idpart +"  "+ countp + " счетчиков!!\nсмотрите историю привязки ПУ");
                    //}
                }
                Globals.id_doc_meter_for_main = Globals.id_doc_meter_mol_docs;
                Globals.en_delegate_cmol();
                Close();
            }
    //        partMeterTableAdapter1.FillByNe_Vydan(mmsDataSet1.PartMeter);
        }

        private void historyMeterSimBindingNavigatorSaveItem_Click(object sender, EventArgs e)
        {
            this.Validate();
            this.historyMeterSimBindingSource.EndEdit();
            this.tableAdapterManager.UpdateAll(this.mmsDataSet1);

        }

        private void lookUpEdit4_Closed(object sender, DevExpress.XtraEditors.Controls.ClosedEventArgs e)
        {
            if (e.CloseMode == DevExpress.XtraEditors.PopupCloseMode.Normal)
            {
                Globals.id_partt = (int)(sender as DevExpress.XtraEditors.LookUpEdit).GetColumnValue("id");
                partMeterTableAdapter1.FillByNe_VydanP(mmsDataSet1.PartMeter, Globals.id_partt);
            }
        }

        private void btsave_Click(object sender, EventArgs e)
        {
            try
            {
                //dataGridView1.CurrentRow.Index
                //int indexxx = dataGridView1.FirstDisplayedScrollingRowIndex + 1;
                //string[] kol2 = new string[3];
                //for (int k = 0; k < dataGridView1.RowCount; ++k)
                //{
                //    //string idp = dataGridView1.CurrentRow.Cells[0].Value.ToString();
                //    //int indext1 = dataGridView1.Rows[k].Index;
                //    string idp = dataGridView1.Rows[k].Cells[0].ToString();
                //    string nameee = dataGridView1.Rows[k].Cells[1].ToString();
                //    string counttt = dataGridView1.Rows[k].Cells[2].ToString();
                //    //this.queriesTableAdapter1.insert_MeterMOLdocs2(Globals.id_doc_meter_mol_docs, Convert.ToInt32(idp));
                //}
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error" + ex.ToString());
            }
            Globals.id_doc_meter_for_main = Globals.id_doc_meter_mol_docs;
            Globals.en_delegate_cmol();
            this.Close();
        }

        private void btDelete_Click(object sender, EventArgs e)
        {
            //if (dataGridView1.RowCount == 0)
            //{
            //    MessageBox.Show("Нет данных для удаления");return;
            //}
            //dataGridView1.Rows.RemoveAt(dataGridView1.CurrentRow.Index);
        }

        private void dataGridView1_RowPrePaint(object sender, DataGridViewRowPrePaintEventArgs e)
        {
            //for (int i = 0; i < dataGridView1.ColumnCount; i++)
            //    for (int j = 0; j < dataGridView1.RowCount; j++)
            //    {
            //        if (j % 2 == 0)
            //            dataGridView1[i, j].Style.BackColor = Color.Lavender;
            //        else
            //            dataGridView1[i, j].Style.BackColor = Color.White;
            //    }
            //{

            //    object head =
            //        this.dataGridView1.Rows[e.RowIndex].HeaderCell.Value;
            //    if (head == null ||
            //        !head.Equals((e.RowIndex + 1).ToString()))
            //        this.dataGridView1.Rows[e.RowIndex].HeaderCell.Value =
            //            (e.RowIndex + 1).ToString();
            //}  
        }
    }
}
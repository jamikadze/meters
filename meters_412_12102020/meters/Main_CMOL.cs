using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;

namespace meters
{
    public partial class Main_CMOL : DevExpress.XtraEditors.XtraForm
    {
        int? id_MMOL;
        int? id_MOL;
        public Main_CMOL()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            spr_SlujbaTableAdapter1.Fill(mmsDataSet1.spr_Slujba);
        }

        private void Main_CMOL_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'mMSDataSet.View_MeterMoldocs2' table. You can move, or remove it, as needed.
            //this.view_MeterMoldocs2TableAdapter.FillByiIDMeterMOLdocs2(this.mMSDataSet.View_MeterMoldocs2, Globals.id_doc_meter_mol_docs);
            // TODO: This line of code loads data into the 'mMSDataSet.View_MeterMoldocs' table. You can move, or remove it, as needed.
            //this.view_MeterMoldocsTableAdapter.FillBySlujba(this.mMSDataSet.View_MeterMoldocs, Globals.id_slujbi);
            // TODO: This line of code loads data into the 'mMSDataSet.spr_Slujba' table. You can move, or remove it, as needed.
            this.spr_SlujbaTableAdapter.Fill(this.mMSDataSet.spr_Slujba);
            // TODO: This line of code loads data into the 'mMSDataSet.spr_metrologMol' table. You can move, or remove it, as needed.
            this.spr_metrologMolTableAdapter.Fill(this.mMSDataSet.spr_metrologMol,Globals.id_slujbi);
            // TODO: This line of code loads data into the 'mMSDataSet.HistoryMeterSim' table. You can move, or remove it, as needed.
           
            // TODO: This line of code loads data into the 'mMSDataSet.spr_MeterStatus' table. You can move, or remove it, as needed.
         
            // TODO: This line of code loads data into the 'mMSDataSet.spr_MeterType' table. You can move, or remove it, as needed.
            this.spr_MeterTypeTableAdapter.FillByUmnye(this.mMSDataSet.spr_MeterType);
            // TODO: This line of code loads data into the 'mMSDataSet.spr_ReturnReason' table. You can move, or remove it, as needed.
            this.spr_ReturnReasonTableAdapter.Fill(this.mMSDataSet.spr_ReturnReason);
            // TODO: This line of code loads data into the 'mMSDataSet.Shipments' table. You can move, or remove it, as needed.
            //this.shipmentsTableAdapter.Fill(this.mMSDataSet.Shipments);
            // TODO: This line of code loads data into the 'mMSDataSet.MeterMOLdocs2' table. You can move, or remove it, as needed.
            //this.meterMOLdocs2TableAdapter.FillByIDMeterMOLDoc2(this.mMSDataSet.MeterMOLdocs2,Globals.id_doc_meter_mol_docs);
            //this.Text = "Вы вошли как: " + Globals.name_user + "        Подразделение: " + Globals.name_slujbi;  
            // TODO: This line of code loads data into the 'mMSDataSet.spr_Executor' table. You can move, or remove it, as needed.
            this.spr_ExecutorTableAdapter.Fill(this.mMSDataSet.spr_Executor);
            // TODO: This line of code loads data into the 'mMSDataSet.spr_MMOL' table. You can move, or remove it, as needed.
            this.spr_MMOLTableAdapter.Fill(this.mMSDataSet.spr_MMOL);
            // TODO: This line of code loads data into the 'mMSDataSet.Users' table. You can move, or remove it, as needed.
            this.usersTableAdapter.Fill(this.mMSDataSet.Users);
            // TODO: This line of code loads data into the 'mMSDataSet.MeterMOLdocs' table. You can move, or remove it, as needed.
          //this.meterMOLdocsTableAdapter.FillBySlujba(this.mMSDataSet.MeterMOLdocs,Globals.id_slujbi);
           
            simpleButton1.Visible = false;
            groupControl3.Visible = false;
            Delegate.RemoveAll(Globals.en_delegate_cmol, Globals.en_delegate_cmol);
            Globals.en_delegate_cmol = visible_main1;

            if (Globals.id_access == 5)// configurator
            {
                groupControl5.Visible = false;
                
            }

        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            simpleButton1_Click(sender, e);
            dateEdit1.Text = "";
            lookUpEdit1.EditValue = null;
            lookUpEdit2.EditValue = null;
            radioButton1.Checked = false;
            radioButton2.Checked = false;
            groupControl3.Visible = true;
            // radioButton4.Checked = true;
            textEdit1.Focus();
            textBox1.Visible = true;
            groupBox1.Visible = false;

        }

        private void visible_main1()
        {
            this.spr_ReturnReasonTableAdapter.Fill(this.mMSDataSet.spr_ReturnReason);
            // TODO: This line of code loads data into the 'mMSDataSet.Shipments' table. You can move, or remove it, as needed.
            this.shipmentsTableAdapter.Fill(this.mMSDataSet.Shipments);
            // TODO: This line of code loads data into the 'mMSDataSet.MeterMOLdocs2' table. You can move, or remove it, as needed.
           // this.meterMOLdocs2TableAdapter.FillByIDMeterMOLDoc2(this.mMSDataSet.MeterMOLdocs2,Globals.id_doc_meter_for_main);
            this.view_MeterMoldocs2TableAdapter.FillByiIDMeterMOLdocs2(this.mMSDataSet.View_MeterMoldocs2, Globals.id_doc_meter_for_main);
            this.Text = "Вы вошли как: " + Globals.name_user + "        Подразделение: " + Globals.name_slujbi;
            // TODO: This line of code loads data into the 'mMSDataSet.spr_Executor' table. You can move, or remove it, as needed.
            this.spr_ExecutorTableAdapter.Fill(this.mMSDataSet.spr_Executor);
            // TODO: This line of code loads data into the 'mMSDataSet.spr_MMOL' table. You can move, or remove it, as needed.
            this.spr_MMOLTableAdapter.Fill(this.mMSDataSet.spr_MMOL);
            // TODO: This line of code loads data into the 'mMSDataSet.Users' table. You can move, or remove it, as needed.
            this.usersTableAdapter.Fill(this.mMSDataSet.Users);
            this.spr_MeterTypeTableAdapter.FillByUmnye(this.mMSDataSet.spr_MeterType);
            simpleButton1.Visible = false;
           // groupControl3.Visible = false;
            textEdit1.Text = "";
            textEdit1.Focus();
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            try
            {
                if (dateEdit1.Text != "" && lookUpEdit1.Text != "" && lookUpEdit2.Text != "")
                {
                    DateTime? date = Convert.ToDateTime(dateEdit1.Text);
                    int? id_user = Globals.id_user;
                    int? id_current_doc = Globals.id_current_doc;
                    queriesTableAdapter1.insert_MeterMOLdocs(date, id_MMOL, id_MOL, id_user, ref id_current_doc,0);
                    this.view_MeterMoldocsTableAdapter.Fill(this.mMSDataSet.View_MeterMoldocs);
                    //this.meterMOLdocsTableAdapter.Fill(this.mMSDataSet.MeterMOLdocs);
                    BS_View_MeterMoldocs.MoveLast();
                    //meterMOLdocsBindingSource.MoveLast();
                    dateEdit1.Text = "";
                    lookUpEdit1.EditValue = null;
                    lookUpEdit2.EditValue = null;
                    radioButton1.Checked = false;
                    //Form d = new spr_Part_Box();
                    //d.Show();


                }
                else { MessageBox.Show("Не все поля заполнены"); }

            }
            catch (Exception ex) { MessageBox.Show(ex.ToString()); }
        }

        private void lookUpEdit1_Closed(object sender, DevExpress.XtraEditors.Controls.ClosedEventArgs e)
        {
            if (e.CloseMode == DevExpress.XtraEditors.PopupCloseMode.Normal)
            {
                id_MMOL = (int)(sender as DevExpress.XtraEditors.LookUpEdit).GetColumnValue("id");
            }
        }

        private void lookUpEdit2_Closed(object sender, DevExpress.XtraEditors.Controls.ClosedEventArgs e)
        {
            if (e.CloseMode == DevExpress.XtraEditors.PopupCloseMode.Normal)
            {
                id_MOL = (int)(sender as DevExpress.XtraEditors.LookUpEdit).GetColumnValue("id");
            }
        }

        private void radioButton1_Click(object sender, EventArgs e)
        {
            if (radioButton1.Checked == true)
            {
                simpleButton1.Visible = false;
                radioButton2.Checked = false;
                groupControl3.Visible = false;
                simpleButton1_Click(null,null);
            }
          
        }

        private void gridControl2_Click(object sender, EventArgs e)
        {

        }

        private void meterMOLdocsBindingSource_CurrentItemChanged(object sender, EventArgs e)
        {
            try{
                //Globals.id_doc_meter_mol_docs = Convert.ToInt32(((DataRowView)meterMOLdocsBindingSource.Current).Row["id"]);
                //if ((((DataRowView)meterMOLdocsBindingSource.Current).Row["doc_status"]) is DBNull) {  Globals.meter_doc_status = false;}
                //else { Globals.meter_doc_status = Convert.ToBoolean(((DataRowView)meterMOLdocsBindingSource.Current).Row["doc_status"]); }
               // this.meterMOLdocs2TableAdapter.FillByIDMeterMOLDoc2(this.mMSDataSet.MeterMOLdocs2, Globals.id_doc_meter_mol_docs);
            }
            catch{}
        }

        private void radioButton2_Click(object sender, EventArgs e)
        {
            if (radioButton2.Checked == true)
            {

                if (dateEdit1.Text != "" && lookUpEdit1.Text != "" && lookUpEdit2.Text != "")
                {
                    simpleButton1.Visible = false;
                    radioButton1.Checked = false;
                    groupControl3.Visible = true;
                    radioButton4.Checked = true;
                    radioButton3.Checked = false;
                    simpleButton3_Click(null, null);
                    textBox1.Focus();
                }
            }
            else { MessageBox.Show("Заполните все поля"); }
        }

      
        private void simpleButton3_Click(object sender, EventArgs e)
        {
             try
            {
                if (dateEdit1.Text != "" && lookUpEdit1.Text != "" && lookUpEdit2.Text != "")
                {
                    DateTime? date = Convert.ToDateTime(dateEdit1.Text);
                    int? id_user = Globals.id_user;
                    int? id_current_doc = Globals.id_current_doc;
                    queriesTableAdapter1.insert_MeterMOLdocs(date, id_MMOL, id_MOL, id_user, ref id_current_doc,0);
                    this.meterMOLdocsTableAdapter.Fill(this.mMSDataSet.MeterMOLdocs);
                    meterMOLdocsBindingSource.MoveLast();
                    dateEdit1.Text = "";
                    lookUpEdit1.EditValue = null;
                    lookUpEdit2.EditValue = null;
                    radioButton2.Checked = false;
                }
                else { MessageBox.Show("Не все поля заполнены"); }

            }
             catch (Exception ex) { MessageBox.Show(ex.ToString()); }
        }

        private void radioButton3_Click(object sender, EventArgs e)
        {
            if (radioButton3.Checked == true)
            {
                groupBox1.Visible = true;
                textBox1.Visible = false;
                radioButton4.Checked = false;
                lookUpEdit3.Focus();
            }
           
        }

        private void radioButton4_CheckedChanged(object sender, EventArgs e)
        {
            if (radioButton4.Checked == true)
            { groupBox1.Visible = false;
            textBox1.Visible = true;
            radioButton3.Checked = false;
            }
        }

        private void lookUpEdit3_Closed(object sender, DevExpress.XtraEditors.Controls.ClosedEventArgs e)
        {
            if (e.CloseMode == DevExpress.XtraEditors.PopupCloseMode.Normal)
            {
                Globals.id_meter_type = (int)(sender as DevExpress.XtraEditors.LookUpEdit).GetColumnValue("id_Type");
                
            }
          
        }

        private void simpleButton4_Click(object sender, EventArgs e)
        {
             int id_shipments ;
            if (lookUpEdit3.Text != "" && textEdit2.Text != "") 
            {
                Globals.znum = textEdit2.Text;
             this.shipmentsTableAdapter.FillByShipments(this.mMSDataSet.Shipments,Globals.znum,Globals.id_meter_type);
            if(shipmentsBindingSource.Count>0)
            {
              int status_counters= Convert.ToInt32(((DataRowView)shipmentsBindingSource.Current).Row["id_MeterStatus"]);
                id_shipments = Convert.ToInt32(((DataRowView)shipmentsBindingSource.Current).Row["id"]);
                if(status_counters==2 || status_counters==6)
                {
                    //this.meterMOLdocs2TableAdapter.FillByIdShipments(this.mMSDataSet.MeterMOLdocs2, id_shipments);
                    this.view_MeterMoldocs2TableAdapter.FillByid_ship(this.mMSDataSet.View_MeterMoldocs2, id_shipments);

                    //if (meterMOLdocs2BindingSource.Count == 0)
                    if (BS_View_MeterMoldocs2.Count == 0)
                    {
                        this.historyMeterSimTableAdapter.FillBydate(this.mMSDataSet.HistoryMeterSim, id_shipments);
                        if (historyMeterSimBindingSource.Count > 0)
                        {
                            try { queriesTableAdapter1.insert_one_meter_MeterMOLdocs2(Globals.id_doc_meter_mol_docs, id_shipments);
                            //this.shipmentsTableAdapter.UpdateStatus_issuedMOL(id_shipments);
                            }
                            catch (Exception ex) { MessageBox.Show(ex.ToString()); }
                        }
                        else { MessageBox.Show("Этот счетчик " + Globals.znum + " нельзя выдать. Он без СИМ-карты"); }
                    }
                    else
                    {
                     //   if ((((DataRowView)spr_MeterStatusBindingSource.Current).Row["MeterStatus"]) is DBNull)
                       // { 
                            MessageBox.Show("Нельзя выдать счетчик " + Globals.znum + ". Он уже выдан");
                       // }
                     //   else
                     //   {
                     //       this.historyMeterSimTableAdapter.FillBydate(this.mMSDataSet.HistoryMeterSim, id_shipments);
                     //        if (historyMeterSimBindingSource.Count > 0)
                    //         {
                    //             try { queriesTableAdapter1.insert_one_meter_MeterMOLdocs2(Globals.id_doc_meter_mol_docs, id_shipments);
                    //             //this.shipmentsTableAdapter.UpdateStatus_issuedMOL(id_shipments);
                    //             }
                    //             catch (Exception ex) { MessageBox.Show(ex.ToString()); }
                    //         }
                    //         else { MessageBox.Show("Этот счетчик " + Globals.znum + " нельзя выдать. Он без СИМ-карты"); }
                    //    }
                    }
                }
                else
                {   this.spr_MeterStatusTableAdapter.FillById(this.mMSDataSet.spr_MeterStatus,status_counters);
                   string status=Convert.ToString(((DataRowView)spr_MeterStatusBindingSource.Current).Row["MeterStatus"]);

                   MessageBox.Show("Этот счетчик " + Globals.znum + " выдать невозможно. У него статус: " + status);
                }
            }
            else { MessageBox.Show("Нет такого счетчика " + Globals.znum + " в Shipments");}
            }
            else { MessageBox.Show("Не все поля заполнены"); }
            lookUpEdit3.EditValue=null; textEdit2.Text = "";
            //lookUpEdit3.Focus();
            textEdit2.Focus();
            //this.meterMOLdocs2TableAdapter.FillByIDMeterMOLDoc2(this.mMSDataSet.MeterMOLdocs2, Globals.id_doc_meter_mol_docs);
            this.view_MeterMoldocs2TableAdapter.FillByiIDMeterMOLdocs2(this.mMSDataSet.View_MeterMoldocs2, Globals.id_doc_meter_mol_docs);
            BS_View_MeterMoldocs2.MoveLast();
            //meterMOLdocs2BindingSource.MoveLast();
        }

        private void textEdit2_KeyDown(object sender, KeyEventArgs e)
        {
            //if (e.KeyCode == Keys.Enter)

            //    this.shipmentsTableAdapter.FillBySERIALNO(this.mMSDataSet.Shipments, textEdit2.Text.Trim());
            //if (shipmentsBindingSource.Count>0)
            //{
            //    Globals.idTypeM = Convert.ToInt32(((DataRowView)shipmentsBindingSource.Current).Row["id_MeterType"]);
            //    lookUpEdit3.EditValue = Globals.idTypeM;
            //    Globals.id_meter_type = Globals.idTypeM;
            //    lookUpEdit3.Focus();
            //}
            //else
            //{
            //    MessageBox.Show("Проверьте статус ПУ  " + textEdit2.Text.Trim());
            //    return;
            //}
        }

      

        private void добавитьСчетчикToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Globals.meter_doc_status == false)
            {
                groupControl3.Visible = true;
               // radioButton4.Checked = true;
                textEdit1.Focus();
                textBox1.Visible = true;
                groupBox1.Visible = false;
            }
            else { MessageBox.Show("Нельзя добавить к этому документу счетчик он уже закрыт!!!"); }
        }

        private void удалитьСчетчикToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Globals.meter_doc_status == false)
            {
               this.meterMOLdocs2TableAdapter.DeleteQuery(Globals.id_doc_meter_mol_docs2);
               shipmentsTableAdapter.UpdateStatus_free(Globals.id_Shipments_for_status);
               this.view_MeterMoldocs2TableAdapter.FillByiIDMeterMOLdocs2(this.mMSDataSet.View_MeterMoldocs2, Globals.id_doc_meter_mol_docs);
               //this.meterMOLdocs2TableAdapter.FillByIDMeterMOLDoc2(this.mMSDataSet.MeterMOLdocs2, Globals.id_doc_meter_mol_docs);

            }
            else { MessageBox.Show("Нельзя удалить счетчик из этого документа он уже закрыт!!!"); }
        }

        private void meterMOLdocs2BindingSource_CurrentItemChanged(object sender, EventArgs e)
        {
            //try
            //{
            //    Globals.id_doc_meter_mol_docs2 = Convert.ToInt32(((DataRowView)BS .Current).Row["id"]);
            //    Globals.id_Shipments_for_status = Convert.ToInt32(((DataRowView)meterMOLdocs2BindingSource.Current).Row["id_Shipments"]);

            //}
            //catch { }
        }

        private void shipmentsBindingSource_CurrentChanged(object sender, EventArgs e)
        {

        }

        private void simpleButton5_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("Вы действительно \nхотите закрыть дркумент \nи сформировать накладную???", "Внимание!!!", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (result == DialogResult.Yes)
            {
                
                this.meterMOLdocsTableAdapter.UpdateStatus(Globals.id_doc_meter_mol_docs);
                //this.meterMOLdocsTableAdapter.Fill(this.mMSDataSet.MeterMOLdocs);

                Form d = new Reports2();  //(Globals.id_doc_meter_mol_docs);
                d.Show();
            }
            //this.meterMOLdocsTableAdapter.Fill(this.mMSDataSet.MeterMOLdocs);
        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {
          if (textBox1.Text.Length == 24||textBox1.Text.Length ==12)
        {
                Globals.str = textBox1.Text; 
              Globals.wtr = Globals.str.Substring(0, 3);
              if (Globals.wtr == "077" || Globals.wtr == "078" || Globals.wtr == "069")
                {
                    if (textBox1.Text.Length == 12)
                    {
                        Globals.wtr = Globals.str.Substring(0, 4);
                        Globals.znum = Globals.str.Substring(4, 8);
                    }
                    else
                    {
                        Globals.wtr = Globals.str.Substring(0, 4);
                        Globals.znum = Globals.str.Substring(16, 8);
                    }
                }
                else Globals.znum = Globals.str.Substring(15, 9);    
                this.spr_MeterTypeTableAdapter.FillByTYPE_meter(this.mMSDataSet.spr_MeterType, Globals.wtr);
                if (sprMeterTypeBindingSource.Count > 0)
                {
                   Globals.id_meter_type = Convert.ToInt32(((DataRowView)sprMeterTypeBindingSource.Current).Row["id_Type"]);
                    this.shipmentsTableAdapter.FillByShipments(this.mMSDataSet.Shipments, Globals.znum, Globals.id_meter_type);
                    if (shipmentsBindingSource.Count > 0)
                    {
         int status_counters= Convert.ToInt32(((DataRowView)shipmentsBindingSource.Current).Row["id_MeterStatus"]);
        int  id_shipments = Convert.ToInt32(((DataRowView)shipmentsBindingSource.Current).Row["id"]);
         if (status_counters == 2 || status_counters == 6)
         {
             //this.meterMOLdocs2TableAdapter.FillByIdShipments(this.mMSDataSet.MeterMOLdocs2, id_shipments);
             this.view_MeterMoldocs2TableAdapter.FillByid_ship(this.mMSDataSet.View_MeterMoldocs2, id_shipments);
             if (BS_View_MeterMoldocs2.Count==0)
             //if (meterMOLdocs2BindingSource.Count == 0)
             {
                 this.historyMeterSimTableAdapter.FillBydate(this.mMSDataSet.HistoryMeterSim, id_shipments);
                 if (historyMeterSimBindingSource.Count > 0)
                 {
                     try
                     {
                         queriesTableAdapter1.insert_one_meter_MeterMOLdocs2(Globals.id_doc_meter_mol_docs, id_shipments);
                         //this.shipmentsTableAdapter.UpdateStatus_issuedMOL(id_shipments);
                     }
                     catch (Exception ex)
                     {
                         MessageBox.Show(ex.ToString());
                     }
                 }
                 else { MessageBox.Show("Этот счетчик " + Globals.znum + " нельзя выдать. Он не привязан!"); }
             }
             else
             {
                 //if ((((DataRowView)spr_MeterStatusBindingSource.Current).Row["MeterStatus"]) is DBNull)
                 //{
                     MessageBox.Show("Нельзя выдать счетчик " + Globals.znum + ". Он уже выдан");
                 //}
             }


         }

         else
         {

             this.spr_MeterStatusTableAdapter.FillById(this.mMSDataSet.spr_MeterStatus, status_counters);
             string status = Convert.ToString(((DataRowView)spr_MeterStatusBindingSource.Current).Row["MeterStatus"]);

             MessageBox.Show("Этот счетчик " + Globals.znum + " выдать невозможно. У него статус: " + status);
         }
            
                   }
            else 
            { 
                MessageBox.Show("Нет такого счетчика " + Globals.znum + " в Shipments");
            }
            
            
           
            textBox1.Focus();
            //this.meterMOLdocs2TableAdapter.FillByIDMeterMOLDoc2(this.mMSDataSet.MeterMOLdocs2, Globals.id_doc_meter_mol_docs);
            this.view_MeterMoldocs2TableAdapter.FillByiIDMeterMOLdocs2(this.mMSDataSet.View_MeterMoldocs2, Globals.id_doc_meter_mol_docs);
            //meterMOLdocs2BindingSource.MoveLast();
            BS_View_MeterMoldocs2.MoveLast();
                    
                   }   
                else
                {
                    MessageBox.Show("Нет такого типа ПУ! Позвоните на 64-23, чтобы завели в справочник");
                }
                
        
                }
                else
                    {
                        MessageBox.Show("Не хватает цифр в штрих-коде(24 знака)");
                        textBox1.Text = ""; 
                    }
        }

        private void textBox1_KeyDown(object sender, KeyEventArgs e)
        {
          if (e.KeyCode == Keys.Enter)
            {
                textBox1_TextChanged(null, null);
            }
        }

        private void textBox1_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (
          (e.KeyChar != '0') &&
          (e.KeyChar != '1') &&
          (e.KeyChar != '2') &&
          (e.KeyChar != '3') &&
          (e.KeyChar != '4') &&
          (e.KeyChar != '5') &&
          (e.KeyChar != '6') &&
          (e.KeyChar != '7') &&
          (e.KeyChar != '8') &&
          (e.KeyChar != '9')

        )
            {
                e.KeyChar = Convert.ToChar(0);
            }
        }

        private void textBox1_TextChanged_1(object sender, EventArgs e)
        {

        }

        private void lookUpEdit4_Closed(object sender, DevExpress.XtraEditors.Controls.ClosedEventArgs e)
        {
            if (e.CloseMode == DevExpress.XtraEditors.PopupCloseMode.Normal)
            {
                Globals.id_slujbi = (int)(sender as DevExpress.XtraEditors.LookUpEdit).GetColumnValue("id");
                this.spr_metrologMolTableAdapter.Fill(this.mMSDataSet.spr_metrologMol, Globals.id_slujbi);// метролог Мол он же Мастер по ВПУ
                //this.meterMOLdocsTableAdapter.FillBySlujba(this.mMSDataSet.MeterMOLdocs, Globals.id_slujbi);
                this.view_MeterMoldocsTableAdapter.FillBySlujba(this.mMSDataSet.View_MeterMoldocs, Globals.id_slujbi);
            }
        }

        private void radioButton5_Click(object sender, EventArgs e)
        {
            Form d = new spr_Part_Box();
            d.Show();
        }

        private void ДобавитьпартиюMenuItem1_Click(object sender, EventArgs e)
        {

            if (Globals.meter_doc_status == false)
            {
                Form d = new spr_Part_Box();
                d.Show();
            }
            else { MessageBox.Show("Нельзя добавить к этому документу счетчик он уже закрыт!!!"); }
        }
        private void radioButton5_Click_1(object sender, EventArgs e)
        {
            Form d = new spr_Part_Box();
            d.Show();
        }

        private void textEdit1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                textEdit1_TextChanged(null, null);
            }
        }

        private void textEdit1_TextChanged(object sender, EventArgs e)
        {
            try
            {
                this.partMeter_poiskTableAdapter.FillBy_vidacha(mMSDataSet.PartMeter_poisk, textEdit1.Text.Trim());
                //int id_part = Convert.ToInt32(((DataRowView) partMeter_poiskBindingSource.Current).Row["id"]);
                //int statusP = Convert.ToInt32(((DataRowView) partMeter_poiskBindingSource.Current).Row["Status"]);

                if (partMeter_poiskBindingSource.Count > 0)
                {
                    if ((((DataRowView)partMeter_poiskBindingSource.Current).Row["Status"]) is DBNull)
                    { 
                      
                    
                    int? id_part = Convert.ToInt32(((DataRowView) partMeter_poiskBindingSource.Current).Row["id"]);
                    this.check_sealTableAdapter.Fill_Check_seal(this.mMSDataSet.Check_seal, id_part);
                    if ( this.mMSDataSet.Check_seal.Rows.Count != 0)

                    
                        {
                            foreach (DataRow dr in this.mMSDataSet.Check_seal.Rows)
                            {
                                
                                if ((dr[1].ToString().Equals("") || dr[1].ToString().Equals("0")  || dr[1].ToString() is DBNull)) //&& (dr[2].ToString().Equals("") || dr[2].ToString().Equals("0")))
                                {
                                   MessageBox.Show("Проверьте пломбу ЦРПУ счетчика № " +dr[3].ToString());
                                    break;
                                }
                                
                                    if ((dr[2].ToString().Equals("") || dr[2].ToString().Equals("0") || dr[2].ToString() is DBNull))
                                        {
                                            MessageBox.Show("Проверьте пломбу Модема счетчика № " +dr[3].ToString());
                                            break;
                                        }
                                
                            }
                        }
                        //else
                    //{MessageBox.Show("Нет такой партии № " +id_part);}
                            

                    
                        
                    this.queriesTableAdapter1.insert_MeterMOLdocs2(Globals.id_doc_meter_mol_docs, id_part);
                    Globals.id_doc_meter_for_main = Globals.id_doc_meter_mol_docs;
                    Globals.en_delegate_cmol();
                    }
                    else
                    {
                        MessageBox.Show("Такая партия выдана!");
                    }
                }
                

                    else
                    {
                        MessageBox.Show("Такая партия не существует!");
                    }
                
            }
            catch (Exception)
            {

            }

        }

      

        private void textEdit1_KeyPress(object sender, KeyPressEventArgs e)
        {
            Key_Press(e);
        }

        private static void Key_Press(KeyPressEventArgs e)
        {
            if (
          (e.KeyChar != '0') &&
          (e.KeyChar != '1') &&
          (e.KeyChar != '2') &&
          (e.KeyChar != '3') &&
          (e.KeyChar != '4') &&
          (e.KeyChar != '5') &&
          (e.KeyChar != '6') &&
          (e.KeyChar != '7') &&
          (e.KeyChar != '8') &&
          (e.KeyChar != '9')

        )
            {
                e.KeyChar = Convert.ToChar(0);
            }
        }


        private void BS_View_MeterMoldocs_CurrentItemChanged(object sender, EventArgs e)
        {
            try
            {
                //Globals.id_doc_meter_mol_docs = Convert.ToInt32(((DataRowView)meterMOLdocsBindingSource.Current).Row["id"]);
                Globals.id_doc_meter_mol_docs = Convert.ToInt32(((DataRowView)BS_View_MeterMoldocs.Current).Row["id"]);
                if ((((DataRowView)BS_View_MeterMoldocs.Current).Row["doc_status"]) is DBNull)
                { 
                    Globals.meter_doc_status = false;
                }
                else 
                {
                    Globals.meter_doc_status = Convert.ToBoolean(((DataRowView)BS_View_MeterMoldocs.Current).Row["doc_status"]);
                }
                //this.meterMOLdocs2TableAdapter.FillByIDMeterMOLDoc2(this.mMSDataSet.MeterMOLdocs2, Globals.id_doc_meter_mol_docs);
                //this.view_MeterMoldocs2TableAdapter.FillByiIDMeterMOLdocs2(this.mMSDataSet.View_MeterMoldocs2, Globals.id_doc_meter_mol_docs);
            }
            catch { }
        }

        private void BS_View_MeterMoldocs2_CurrentItemChanged(object sender, EventArgs e)
        {
            try
            {
                Globals.id_doc_meter_mol_docs2 = Convert.ToInt32(((DataRowView)BS_View_MeterMoldocs2.Current).Row["id"]);
                Globals.id_Shipments_for_status = Convert.ToInt32(((DataRowView)BS_View_MeterMoldocs2.Current).Row["id_Shipments"]);

            }
            catch { }
        }

        private void gridControl1_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                //Globals.id_doc_meter_mol_docs = Convert.ToInt32(((DataRowView)meterMOLdocsBindingSource.Current).Row["id"]);
                Globals.id_doc_meter_mol_docs = Convert.ToInt32(((DataRowView)BS_View_MeterMoldocs.Current).Row["id"]);
                if ((((DataRowView)BS_View_MeterMoldocs.Current).Row["doc_status"]) is DBNull)
                { 
                    Globals.meter_doc_status = false;
                }
                else 
                {
                    Globals.meter_doc_status = Convert.ToBoolean(((DataRowView)BS_View_MeterMoldocs.Current).Row["doc_status"]);
                }
                //this.meterMOLdocs2TableAdapter.FillByIDMeterMOLDoc2(this.mMSDataSet.MeterMOLdocs2, Globals.id_doc_meter_mol_docs);
                view_MeterMoldocs2TableAdapter.FillByiIDMeterMOLdocs2(this.mMSDataSet.View_MeterMoldocs2, Globals.id_doc_meter_mol_docs);
            }
            catch { }
        }

        private void gridControl1_DoubleClick(object sender, EventArgs e)
        {
            try
            {
                //Globals.id_doc_meter_mol_docs = Convert.ToInt32(((DataRowView)meterMOLdocsBindingSource.Current).Row["id"]);
                Globals.id_doc_meter_mol_docs = Convert.ToInt32(((DataRowView)BS_View_MeterMoldocs.Current).Row["id"]);
                if ((((DataRowView)BS_View_MeterMoldocs.Current).Row["doc_status"]) is DBNull)
                {
                    Globals.meter_doc_status = false;
                }
                else
                {
                    Globals.meter_doc_status = Convert.ToBoolean(((DataRowView)BS_View_MeterMoldocs.Current).Row["doc_status"]);
                }
                //this.meterMOLdocs2TableAdapter.FillByIDMeterMOLDoc2(this.mMSDataSet.MeterMOLdocs2, Globals.id_doc_meter_mol_docs);
                view_MeterMoldocs2TableAdapter.FillByiIDMeterMOLdocs2(this.mMSDataSet.View_MeterMoldocs2, Globals.id_doc_meter_mol_docs);
            }
            catch { }
        }

        private void textEdit2_Leave(object sender, EventArgs e)
        {
            this.shipmentsTableAdapter.FillBySERIALNO(this.mMSDataSet.Shipments, textEdit2.Text.Trim());
            if (shipmentsBindingSource.Count>0)
            {
                Globals.idTypeM = Convert.ToInt32(((DataRowView)shipmentsBindingSource.Current).Row["id_MeterType"]);
                lookUpEdit3.EditValue = Globals.idTypeM;
                Globals.id_meter_type = Globals.idTypeM;
                lookUpEdit3.Focus();
            }
            else
            {
                MessageBox.Show("Проверьте статус ПУ  " + textEdit2.Text.Trim());
                return;
            }
        }

        }

      


    }

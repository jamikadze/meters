using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using DevExpress.XtraTreeList.Nodes;

namespace meters
{
    public partial class predefect : Form
    {
        int check2 = 0;
        int check1 = 0;
        public predefect()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            spr_PredefectsTableAdapter1.Fill(mmsDataSet1.spr_Predefects);
            // This line of code is generated by Data Source Configuration Wizard
            spr_PredefectsTableAdapter2.Fill(mmsDataSet2.spr_Predefects);
        }
        private void predefect_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'mMSDataSet.spr_Predefects' table. You can move, or remove it, as needed.
           // this.spr_PredefectsTableAdapter.Fill(this.mMSDataSet.spr_Predefects);
            // TODO: This line of code loads data into the 'mMSDataSet.spr_Predefects' table. You can move, or remove it, as needed.
        

        }
        private void simpleButton3_Click(object sender, EventArgs e)
        {
            if (check1 == 1 || check2 == 1)
            {
                List<TreeListNode> nodes = treeList1.GetAllCheckedNodes();
                foreach (TreeListNode no in nodes)
                {
                    int ll3 = Convert.ToInt32(no.GetValue(treeList1.Columns[0]));

                    try
                    {
                        if (ll3 == 1)
                        {
                            queriesTableAdapter1.predefectMeter_1(Globals.id_ship, Globals.id_sim2, Globals.id_user);

                        }
                        if (ll3 == 2)
                        {
                            queriesTableAdapter1.predefectSim_2(Globals.id_ship, Globals.id_sim2, Globals.id_user);

                        }
                        if (ll3 == 3)
                        {
                            queriesTableAdapter1.predefectMeter_Sim_3(Globals.id_ship, Globals.id_sim2, Globals.id_user);

                        }
                        if (ll3 == 4)
                        {
                            queriesTableAdapter1.predefectModem_4(Globals.id_ship, Globals.id_sim2, Globals.id_user);

                        }
                        //if (ll3 == 5)
                        //{
                        //    queriesTableAdapter1.defectSim_5(Globals.id_Shipments, Globals.id_sim, Globals.id_user, DateTime.Today);

                        //}
                        //if (ll3 == 6)
                        //{
                        //    queriesTableAdapter1.defectModem_6(Globals.id_Shipments, Globals.id_sim, Globals.id_user, DateTime.Today);

                        //}
                        if (Globals.Quantity != 0)
                        {
                            queriesTableAdapter1.update_part_Quantity2(Globals.id_Part_Meter, Globals.id_history_meter_ship, Globals.Quantity);
                        }
                        else
                        { 
                        MessageBox.Show("В данной партии нет счетчиков!");
                        }
                            Globals.del_histiry_ship();

                    }
                    catch (Exception se)
                    {
                        MessageBox.Show("Error: " + se.ToString());
                    }
                    Globals.id_doc_meter_for_main = Globals.id_doc_meter_mol_docs;
                    //  Globals.en_delegate_return(); 
                    Globals.del_histiry_ship();
                   
                    Close();

                }
            }
        }

        private void treeList1_BeforeCheckNode(object sender, DevExpress.XtraTreeList.CheckNodeEventArgs e)
        {
            e.State = (e.PrevState == CheckState.Checked ? CheckState.Unchecked : CheckState.Checked);
        }

        private void treeList1_AfterCheckNode(object sender, DevExpress.XtraTreeList.NodeEventArgs e)
        {
            SetCheckedChildNodes(e.Node, e.Node.CheckState);
            SetCheckedParentNodes(e.Node, e.Node.CheckState);
        }
        private void SetCheckedChildNodes(DevExpress.XtraTreeList.Nodes.TreeListNode node, CheckState check)
        {
            check2 = 1;
            for (int i = 0; i < node.Nodes.Count; i++)
            {
                node.Nodes[i].CheckState = check;
                SetCheckedChildNodes(node.Nodes[i], check);
            }
        }
        private void SetCheckedParentNodes(DevExpress.XtraTreeList.Nodes.TreeListNode node, CheckState check)
        {
            check1 = 1;
            if (node.ParentNode != null)
            {
                bool b = false;
                CheckState state;
                for (int i = 0; i < node.ParentNode.Nodes.Count; i++)
                {
                    state = (CheckState)node.ParentNode.Nodes[i].CheckState;
                    if (!check.Equals(state))
                    {
                        b = true;
                        break;
                    }
                }
                node.ParentNode.CheckState = b ? CheckState.Indeterminate : check;
                SetCheckedParentNodes(node.ParentNode, check);
            }
        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            this.Close();
        }

      
    }
}

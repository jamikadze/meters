using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using DevExpress.XtraRichEdit.API.Word;
using DevExpress.XtraTreeList.Nodes;

namespace meters
{
    public partial class spr_materialy : DevExpress.XtraEditors.XtraForm
    {
        int check2 = 0;
        int check1 = 0;
        public spr_materialy()
        {
            InitializeComponent();

            // This line of code is generated by Data Source Configuration Wizard
         
            // This line of code is generated by Data Source Configuration Wizard


            // This line of code is generated by Data Source Configuration Wizard
            spr_MaterialsTableAdapter2.Fill(mmsDataSet2.spr_Materials);
            if (Globals.instMAT == 1)
            {
                simpleButton1.Visible = false;
                button1.Visible = true;
            }
        }

        private void spr_materialy_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'mmsDataSet2.spentMAT2' table. You can move, or remove it, as needed.
            this.spentMAT2TableAdapter.Fill(this.mmsDataSet2.spentMAT2);
            // TODO: This line of code loads data into the 'mmsDataSet2.MaterialDocs2' table. You can move, or remove it, as needed.
            this.materialDocs2TableAdapter.Fill(this.mmsDataSet2.MaterialDocs2);
            // TODO: This line of code loads data into the 'mmsDataSet1.MaterialDocs2' table. You can move, or remove it, as needed.
           if (Globals.instMAT==1)
            {
                simpleButton1.Visible = false;
                button1.Visible = true;
            }
           else
           {
               simpleButton1.Visible = true;
               button1.Visible = false;
           }
           

        }
        private void treeList1_BeforeCheckNode(object sender, DevExpress.XtraTreeList.CheckNodeEventArgs e)
        {
            e.State = (e.PrevState == CheckState.Checked ? CheckState.Unchecked : CheckState.Checked);
        }



        private void treeList1_AfterCheckNode(object sender, DevExpress.XtraTreeList.NodeEventArgs e)
        {

            SetCheckedChildNodes(e.Node, e.Node.CheckState);
            SetCheckedParentNodes(e.Node, e.Node.CheckState);


        }
        private void SetCheckedChildNodes(DevExpress.XtraTreeList.Nodes.TreeListNode node, CheckState check)
        {
            check2 = 1;
            for (int i = 0; i < node.Nodes.Count; i++)
            {
                node.Nodes[i].CheckState = check;
                SetCheckedChildNodes(node.Nodes[i], check);
            }
        }
        private void SetCheckedParentNodes(DevExpress.XtraTreeList.Nodes.TreeListNode node, CheckState check)
        {
            check1 = 1;
            if (node.ParentNode != null)
            {
                bool b = false;
                CheckState state;
                for (int i = 0; i < node.ParentNode.Nodes.Count; i++)
                {
                    state = (CheckState)node.ParentNode.Nodes[i].CheckState;
                    if (!check.Equals(state))
                    {
                        b = true;
                        break;
                    }
                }
                node.ParentNode.CheckState = b ? CheckState.Indeterminate : check;
                SetCheckedParentNodes(node.ParentNode, check);
            }
        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            if (check1 == 1 || check2 == 1)
            {
                List<TreeListNode> nodes = treeList1.GetAllCheckedNodes();
                foreach (TreeListNode no in nodes)
                {

                    string ll1 = no.GetValue(treeList1.Columns[1]).ToString();

                    int countt = Convert.ToInt32(no.GetValue(treeList1.Columns[3]));
                    string ll3 = no.GetValue(treeList1.Columns[3]).ToString();
                    if (countt == 0)
                    {
                        MessageBox.Show("Выберите кол-во!!!");
                        return;

                    }
                
                Double? kol = Convert.ToDouble(ll1);
                int? id_doc = Globals.id_doc_materials;
                int? id_mat = Convert.ToInt32(ll3);
                this.materialDocs2TableAdapter.FillByFinder(this.mmsDataSet2.MaterialDocs2, Globals.id_doc_materials,
                    Convert.ToInt32(ll3));
                if (materialDocs2BindingSource.Count > 0)
                {

                    this.materialDocs2TableAdapter.UpdateQuery(kol, id_doc, id_mat);
                }
                else
                {
                    queriesTableAdapter1.insert_MaterialDocs2(id_doc, id_mat, kol);
                }
            }
        

            }
            this.materialDocs2TableAdapter.FillById_DOC(this.mmsDataSet2.MaterialDocs2,Globals.id_doc_materials);
            Globals.id_doc_materials_for_main = Globals.id_doc_materials;
            //Globals.en_delegate();
            Close();
        }

        private void btclose_Click(object sender, EventArgs e)
        {
            Globals.instMAT = 0;
            this.Close();
        }

        private void button1_Click(object sender, EventArgs e)
        {
             if (check1 == 1 || check2 == 1)
            {
                List<TreeListNode> nodes = treeList1.GetAllCheckedNodes();
                foreach (TreeListNode no in nodes)
                {

                    string ll1 = no.GetValue(treeList1.Columns[1]).ToString();
                    //int countt = Convert.ToInt32(no.GetValue(treeList1.Columns[1]));
                    string ll3 = no.GetValue(treeList1.Columns[3]).ToString();
                    if ( ll1=="")
                    {
                        MessageBox.Show("Выберите кол-во!!!");
                        return;

                    }
                
                Double? kol = Convert.ToDouble(ll1);
                    int? id_inst2 = Globals.id_installedMeters2;
                int? id_mat = Convert.ToInt32(ll3);
                this.spentMAT2TableAdapter.Find_mat(this.mmsDataSet2.spentMAT2, id_inst2, Convert.ToInt32(ll3));
                
                if (spentMAT2BindingSource.Count > 0)
                {

                    queriesTableAdapter1.update_spentMAT2(id_inst2, id_mat, kol);
                }
                else
                {
                    queriesTableAdapter1.insert_spentMAT2(id_inst2, id_mat, kol);
                }
            }
        

            }
            //this.materialDocs2TableAdapter.FillById_DOC(this.mmsDataSet2.MaterialDocs2,Globals.id_doc_materials);
            //Globals.id_doc_materials_for_main = Globals.id_doc_materials;
            //Globals.en_delegate();
            Globals.instMAT = 0;

            Close();
        
        }
    }
}

     
